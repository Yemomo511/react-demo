(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = factory()));
})(this, (function () { 'use strict';

  //由于reactElement $$typeof很特殊，因此定义为一个symbol类型作为独一无法的标识，防止ReactElement被滥用
  //Symbol会产生一个唯一的值，symbol.for()会在全局产生一个唯一的值
  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react-element")
      : 0xeac7;

  //创建ReactElement，具体处理
  const ReactElement = function (type, props, ref, key) {
      return {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          props,
          ref,
          key,
          __mark: "yemomo",
      };
  };
  //此jsx遵循Classic模式，详细参考
  //https://babeljs.io/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=DwEwlgbgBA1gpgTwLwCICGGVRGgLm1AI0KwHsA7AYQBswBjGVAbwzQF8UA-VjYAenAROQA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.24.3&externalPlugins=&assumptions=%7B%7D
  //jsx转换为ReactElement
  const jsx = function (type, config, ...children) {
      const props = {};
      let ref = null;
      let key = null;
      //处理props
      for (const prop in config) {
          const value = config[prop];
          {
              //判断是否是原型上的，考虑对象赋值的时候需要考虑这一点
              if ({}.hasOwnProperty.call(config, prop)) {
                  props[prop] = value;
              }
          }
      }
      //处理children
      //思想 children可能为一个子children 或者 多个 children事实上就是ReactElement
      const childrenLength = children.length;
      if (childrenLength) {
          if (childrenLength == 1) {
              props.children = children[0];
          }
          else {
              props.children = children;
          }
      }
      return ReactElement(type, props, ref, key);
  };
  //生产环境
  const jsxDEV = jsx;

  //打包后成为react包，导出createReactElement 即 React.createReactElement ,
  //babel 会吧jsx 转换 例如<div>aaa</div> 为React.createReactElement("div",{},"aaa")
  //通过我们自定义的方法就可以生成ReactElement
  var index = {
      version: "0.0.0",
      createElement: jsxDEV,
  };

  return index;

}));
