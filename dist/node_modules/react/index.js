(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {})));
})(this, (function (exports) { 'use strict';

  //由于reactElement $$typeof很特殊，因此定义为一个symbol类型作为独一无法的标识，防止ReactElement被滥用
  //Symbol会产生一个唯一的值，symbol.for()会在全局产生一个唯一的值
  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react-element")
      : 0xeac7;

  //创建ReactElement，具体处理
  const ReactElement = function (type, props, ref, key) {
      return {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          props,
          ref,
          key,
          __mark: "yemomo",
      };
  };
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const value = config[prop];
          if (prop == "key") {
              if (value != undefined) {
                  key = value + "";
              }
          }
          if (prop == "ref") {
              if (value != undefined) {
                  ref = value;
              }
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              //config中有children 会是config
              props[prop] = value;
          }
      }
      return ReactElement(type, props, ref, key);
  };
  const isValidReactElement = (object) => {
      return (typeof object === "object" &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  };

  const currentDispatcher = {
      current: null,
  };
  const resolveDispatcher = () => {
      const dispatcher = currentDispatcher.current;
      if (dispatcher === null) {
          throw new Error("Invalid hook call");
      }
      return dispatcher;
  };

  //打包后成为react包，导出createReactElement 即 React.createReactElement ,
  //babel 会吧jsx 转换 例如<div>aaa</div> 为React.createReactElement("div",{},"aaa")
  //通过我们自定义的方法就可以生成ReactElement
  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  //內部currentDispatcher共享
  const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher,
  };
  var index = {
      version: "0.0.0",
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      createElement: jsxDEV,
      isValidElement: isValidReactElement
  };

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.default = index;
  exports.useState = useState;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
